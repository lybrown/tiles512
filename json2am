#!/usr/bin/perl
use strict;
use warnings;
use Image::Magick;
use Data::Dumper;
$Data::Dumper::Indent = 1;

my %colors = (
    "0,0,0" => [0, 0],
    "0,168,0" => [3, 2],
    "60,188,252" => [1, 2],
    "92,148,252" => [1, 1],
    "128,208,16" => [3, 3],
    "200,76,12" => [2, 2],
    "216,40,0" => [2, 2],
    "252,152,56" => [2, 3],
    "252,188,176" => [2, 3],
    "252,252,252" => [0, 3],
);

sub pal {
    my ($image) = @_;
    my %colors;
    my @pixels = $image->GetPixels(width=>$image->Get("width"), height=>$image->Get("height"));
    $_ >>= 8 for @pixels;
    $colors{join ",", splice @pixels, 0, 3}++ while @pixels;
    my @colors = map [split /,/], keys %colors;
    @colors == 16 or die "ERROR: image must have exactly 16 colors but has ",
        scalar @colors, ": ", (Dumper \@colors), "\n";
    my @reds = grep { $_->[0] > $_->[1] && $_->[0] > $_->[2] } @colors;
    my @greens = grep { $_->[1] > $_->[0] && $_->[0] > $_->[2] } @colors;
    my @blues = grep { $_->[2] > $_->[1] && $_->[2] > $_->[0] } @colors;
    my @greys = grep { $_->[0] == $_->[1] && $_->[0] == $_->[2] } @colors;
    @reds = sort { $a->[0] <=> $b->[0] } @reds;
    @greens = sort { $a->[1] <=> $b->[1] } @greens;
    @blues = sort { $a->[2] <=> $b->[2] } @blues;
    @greys = sort { $a->[0] <=> $b->[0] } @greys;
    my %pal;
    for ([\@reds, 1], [\@greens, 3], [\@blues, 2], [\@greys, 0]) {
        my ($hue, $val) = @$_;
        $pal{join ",", @{$hue->[$_]}} = [$val, $_] for 0 .. 3;
    }
    $pal{$_} = $pal{$_}[0] << 2 | $pal{$_}[1] for keys %pal;
    return \%pal;
}

sub parsejson {
    my ($file) = @_;
    open my $fh, $file or die "ERROR: Cannot open $file: $!\n";
    my $text = join "", <$fh>;
    $text =~ s/:/=>/g;
    $text =~ s/=>true/=>1/g;
    $text =~ s/=>false/=>0/g;
    my $struct = eval $text or die $@;
    return $struct;
}

sub readimage {
    my ($file) = @_;
    my $image = Image::Magick->new;
    my $status = $image->Read($file);
    warn "WARNING: $status" if $status;
    return $image;
}

sub chline {
    my (@bmp) = @_;
    my $hue = ($bmp[0]<<4&0xC0)|($bmp[1]<<2&0x30)|($bmp[2]<<0&0xC)|($bmp[3]>>2&0x3);
    my $lum = ($bmp[0]<<6&0xC0)|($bmp[1]<<4&0x30)|($bmp[2]<<2&0xC)|($bmp[3]<<0&0x3);
    return ($hue, $lum);
}

sub dump_chsets {
    my ($map, $palimage) = @_;
    my $tileset = $map->{tilesets}[0];
    my $image = readimage($tileset->{image});
    my $pal = pal($palimage);
    my @pixels;
    for (my $ch = 0; $ch < 512; ++$ch) {
	my $x = 4 * ($ch % 32);
	my $y = 16 * int(($ch % 128) / 32) + 4 * int($ch / 128);
        warn "CH: $ch X: $x Y: $y\n";
	push @pixels, $image->GetPixels(x => $x, y => $y, width => 4, height => 4);
    }
    warn "PIXEL COUNT: ", scalar @pixels, "\n";
    $_ >>= 8 for @pixels;
    my @bmp;
    while (@pixels) {
        my $key = join ",", splice @pixels, 0, 3;
        #my $color = $pal->{$key};
        my $color = $colors{$key}[0]<<2|$colors{$key}[1];
        defined $color or warn "COLOR NOT FOUND: $key\n";
        push @bmp, $color;
    }
    my @chset;
    push @chset, chline(splice @bmp, 0, 4) while @bmp;
    my $ch = 0;
    print "  dta ", (join ",", splice @chset, 0, 8), " ; ", $ch++, "\n" while @chset;
}

sub dump_map {
    my ($mapcells) = @_;
    my @copy = @$mapcells;
    print "  org buffer\n";
    print "  ; Dest Start Address, Dest End Address, Bank\n";
    print "  dta a(map),a(map+\$2000),0\n";
    print "  dta ", (join ",", splice @copy, 0, 32), "\n" while @copy;
    print "  ini relocate\n";
}

sub getlayer {
    my ($map, $name) = @_;
    for my $layer (@{$map->{layers}}) {
        return $layer if $layer->{name} eq $name;
    }
    die "ERROR: Cannot find layer $name\n";
}

sub overlay {
    my ($map, $mapcells, $name, $tileoffset, $mapoffset, $shift) = @_;
    my $layer = getlayer($map, $name);
    my $data = $layer->{data} or die;
    my $count = scalar @$data;
    warn "INFO: layer: '$name' tileoffset: $tileoffset mapoffset: $mapoffset\n";
    for my $i ($mapoffset .. $#$mapcells) {
	my $value = $data->[$i];
	defined $value or die "ERROR: $name layer is smaller than visual: $i.\n";
	next unless $value;
        #warn "PROP: $value CELL: ", $mapcells->[$i-$mapoffset], "\n";
	$value -= $tileoffset;
	$value <<= $shift;
	$mapcells->[$i-$mapoffset] |= $value;
    }
}

sub main {
    my $map = parsejson($ARGV[0]);
    my $palimage = readimage($ARGV[1]);
    my $layer = getlayer($map, "visual");
    my $data = $layer->{data} or die;
    my %counts;
    $counts{$_}++ for @$data;
    #my @tiles = sort { $counts{$b} <=> $counts{$a} } keys %counts;
    #my %raw2tile = map { $tiles[$_] => $_+1 } 0 .. $#tiles;
    #my @mapcells = map { $raw2tile{$_} || 0 } @$data;
    my @tiles = (1 .. 8);
    #my @mapcells = map { $_ eq 6 ? 5 : 7 } @$data;
    my @mapcells = map $_-1, @$data;
    print "  org buffer\n";
    print "  ; Dest Start Address, Dest End Address, Bank\n";
    print "  dta a(chset),a(chset+\$1000),0\n";
    dump_chsets($map, $palimage);
    print "  ini relocate\n";
    overlay($map, \@mapcells, "visual", 1, 0, 0);
    overlay($map, \@mapcells, "props", 33, $layer->{width}, 6);
    #overlay($map, \@mapcells, "under coins", 1, 0, 3);
    dump_map(\@mapcells);
}

main();
