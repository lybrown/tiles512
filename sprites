#!/usr/bin/perl
use strict;
use warnings;
use Image::Magick;
use Data::Dumper;
$Data::Dumper::Indent = 1;

my $height = 44;

sub readimage {
    my ($file) = @_;
    my $image = Image::Magick->new;
    my $status = $image->Read($file);
    warn "WARNING: $status" if $status;
    return $image;
}


sub num { sprintf "\$%x", $_[0] }

sub block {
    my ($start, $end, $bank, $data) = @_;
    my @data = @$data;
    print "  org $start+hy\n";
    print "  dta ",(join",",splice @data, 0, 16),"\n" while @data;
}

sub byte {
    64*$_[1]+
    16*$_[2]+
    4*$_[3]+
    1*$_[4];
}

sub frame {
    my ($image, $x, $y, $pmbase, $rev, $bank) = @_;
    my @pixels = $image->GetPixels(x => $x, y => $y,
        width => 32, height => $height);
    my @bw = map $pixels[$_*3]?1:0, 0 .. @pixels/3-1;
    @bw = reverse @bw if $rev;
    my @range = 0 .. $height-1;
    @range = reverse @range if $rev;
    for my $player (0 .. 3) {
	my $off = $player * 8;
	my @pbytes = map((byte(@bw[$_*32+$off .. $_*32+$off+7])) x 1, @range);
	my $dst = $pmbase + 0x200 + $player*0x80;
        print "  ; player $player\n";
	block(num($dst), num($dst + $height), $bank, \@pbytes);
    }
}

sub main {
    my $image = readimage($ARGV[0]);
    $image->Set(alpha => "Off");
    for my $rev (0, 1) {
        print "  ini setbank", $rev+1, "\n";
        print "  ini clearbank\n";
        for my $x (0 .. 7) {
            my $pmbase = 0x4000 + $x * 0x800;
            frame($image, $x*32, 0, $pmbase, $rev, $rev+1);
        }
    }
    print "  ini setbank3\n";
    print "  ini clearbank\n";
    frame($image, 0, 64, 0x4000 + $_*0x800, $_&1, 3) for 0 .. 3;
    frame($image, 64, 64, 0x6000 + $_*0x800, $_&1, 3) for 0 .. 3;
}

main();
